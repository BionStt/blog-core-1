{"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/EkeOK0LmqneCzLQLMaERGHd6wtY\"","id":null,"items":[{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Ricardo Pietrobon","id":"106268032364497388036","image":{"url":"https:\/\/lh4.googleusercontent.com\/-17Io5bGKllA\/AAAAAAAAAAI\/AAAAAAAAnCQ\/NK06JhxlrpE\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/106268032364497388036"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/mzDk9DH_o8BaOpuI0PFCkk_0zBs\"","geocode":null,"id":"z13fvz0agrvhwx0ix04cft2ziqrnzj345aw","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"(This article was first published on NumberTheory \u00bb R stuff , and kindly contributed to R-bloggers)\n\nWhich text editor do you use? Once in a while this question pops up on the R-help mailing list. Up until recently I used the KDE text editor Kate under Linux. Recently, I came across a new text editor for R, RStudio. Although the term text editor does not do it justice, it is more of an Integrated Development Environment (IDE).\n\nRStudio is an open...","displayName":"RStudio: a cross-platform IDE for R","embed":null,"fullImage":{"height":null,"type":"image\/jpeg","url":"http:\/\/rstudio.org\/images\/screenshots\/rstudio-history.png","width":null},"id":null,"image":{"height":120,"type":"image\/jpeg","url":"https:\/\/lh5.googleusercontent.com\/proxy\/Us1azoDFA-0xbjd9d5IiXpXR2pVIE4okdY7KKRJva3PbeQZHjZsVtTt4VpUySNgCA4U3yDIGspvQm0IJMynDLCbjfefvhXPo=w120-h120","width":120},"objectType":"article","thumbnails":null,"url":"http:\/\/feedproxy.google.com\/~r\/RBloggers\/~3\/u6tTMGTGPuA\/"}],"content":"my wishlist - integration with versioning systems (git and svn)<br \/><br \/>#ror #datamining #rstats\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13fvz0agrvhwx0ix04cft2ziqrnzj345aw\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13fvz0agrvhwx0ix04cft2ziqrnzj345aw\/comments","totalItems":0},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13fvz0agrvhwx0ix04cft2ziqrnzj345aw\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/106268032364497388036\/posts\/dy6kpzWZbBU"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2011-11-11T22:54:57.525Z","radius":null,"title":"my wishlist - integration with versioning systems (git and svn)\n\n#ror #datamining #rstats","updated":"2011-11-11T22:54:57.525Z","url":"https:\/\/plus.google.com\/106268032364497388036\/posts\/dy6kpzWZbBU","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Kees van Bochove","id":"106171512251504346499","image":{"url":"https:\/\/lh3.googleusercontent.com\/-VHFxUE_jhNc\/AAAAAAAAAAI\/AAAAAAAAAFs\/yACFAznPHrc\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/106171512251504346499"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/5WuUQe4iV8N4mTQo2Gpq3TA0Gkg\"","geocode":null,"id":"z13rcxz5bs35ubsir04celugcqreyjz4vy40k","kind":"plus#activity","object":{"actor":null,"attachments":null,"content":"Git is a really great versioning system with a sometimes quite messed up user interface. But what I love most about it is the documentation, it&#39;s very nerdy (and not very useful, googling stackoverflow usually works better if you want to know how to accomplish tasks).<br \/><br \/>Here&#39;s a gem from the documentation on git-tag:<br \/>&quot;<br \/>\u00a0\u00a0 On Re-tagging<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 What should you do when you tag a wrong commit and you would want to re-tag?<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 If you never pushed anything out, just re-tag it. Use &quot;-f&quot; to replace the old one. And you&#39;re done.<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 But if you have pushed things out (or others could just read your repository directly), then others will have already seen the<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 old tag. In that case you can do one of two things:<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 1. The sane thing. Just admit you screwed up, and use a different name. Others have already seen one tag-name, and if you keep<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 the same name, you may be in the situation that two people both have &quot;version X&quot;, but they actually have different &quot;X&quot;&#39;s. So<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 just call it &quot;X.1&quot; and be done with it.<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 2. The insane thing. You really want to call the new version &quot;X&quot; too, even though others have already seen the old one. So just<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 use git tag -f again, as if you hadn&#39;t already published the old one.<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 However, Git does not (and it should not) change tags behind users back. So if somebody already got the old tag, doing a git<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 pull on your tree shouldn&#39;t just make them overwrite the old one.<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 If somebody got a release tag from you, you cannot just change the tag for them by updating your own one. This is a big security<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 issue, in that people MUST be able to trust their tag-names. If you really want to do the insane thing, you need to just fess up<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 to it, and tell people that you messed up. You can do that by making a very public announcement saying:<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Ok, I messed up, and I pushed out an earlier version tagged as X. I<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 then fixed something, and retagged the <b>fixed<\/b> tree as X again.<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 If you got the wrong tag, and want the new one, please delete<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 the old one and fetch the new one by doing:<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 git tag -d X<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 git fetch origin tag X<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 to get my updated tag.<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 You can test which tag you have by doing<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 git rev-parse X<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 which should return 0123456789abcdef.. if you have the new version.<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Sorry for inconvenience.<br \/><br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Does this seem a bit complicated? It should be. There is no way that it would be correct to just &quot;fix&quot; it behind peoples backs.<br \/>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 People need to know that their tags might have been changed.<br \/>&quot;<br \/><br \/>Get it now?! You should! :-)\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13rcxz5bs35ubsir04celugcqreyjz4vy40k\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13rcxz5bs35ubsir04celugcqreyjz4vy40k\/comments","totalItems":0},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13rcxz5bs35ubsir04celugcqreyjz4vy40k\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/106171512251504346499\/posts\/d69F74wdLsF"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2012-12-10T20:47:50.538Z","radius":null,"title":"Git is a really great versioning system with a sometimes quite messed up user interface. But what I ...","updated":"2012-12-10T20:47:50.538Z","url":"https:\/\/plus.google.com\/106171512251504346499\/posts\/d69F74wdLsF","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Serv\u00e9 Hermans","id":"111888040890769277678","image":{"url":"https:\/\/lh5.googleusercontent.com\/-_S2AypR2J-w\/AAAAAAAAAAI\/AAAAAAAADx0\/bCh13N-2ukQ\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/111888040890769277678"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/GOBLKBA6Or2WXo9b49nsNn3Uksw\"","geocode":null,"id":"z12rc11heymqsdblh22zgl35bmvdtfbmi","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"Currently I am working on a small project together with a friend of mine. For us, using the Team license of 500$ may be one step too much to start with. As a result, we decided to look for free altern...","displayName":"How to use Git as a versioning system for Unity","embed":null,"fullImage":{"height":null,"type":"image\/jpeg","url":"http:\/\/1.bp.blogspot.com\/-dEs74H7ETMs\/URuquVF7V_I\/AAAAAAAADtY\/EyMQl13b0tQ\/s320\/GIT01.png","width":null},"id":null,"image":{"height":120,"type":"image\/jpeg","url":"https:\/\/lh5.googleusercontent.com\/proxy\/Os6mqRID9Qn6oX6R2L6q02FuA9xfN4pD0Zc_oHM8T8tWWCpMxDxD3PEhB_cuU_3wPZ6VEWdDl3WGmHoq0sWAqqckBXaGc4YmYWlc6K5-QLXL8Oipz6_4iInNyLeWpmIALMxVTom9B70=w120-h120","width":120},"objectType":"article","thumbnails":null,"url":"http:\/\/servehermans.blogspot.com\/2013\/02\/how-to-use-git-as-versioning-system-for.html"}],"content":"Unity3D and free version control\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12rc11heymqsdblh22zgl35bmvdtfbmi\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12rc11heymqsdblh22zgl35bmvdtfbmi\/comments","totalItems":0},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12rc11heymqsdblh22zgl35bmvdtfbmi\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/111888040890769277678\/posts\/8ZqJ96hkugq"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2013-02-13T15:36:29.849Z","radius":null,"title":"Unity3D and free version control","updated":"2013-02-13T15:36:29.849Z","url":"https:\/\/plus.google.com\/111888040890769277678\/posts\/8ZqJ96hkugq","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Ben FrantzDale","id":"105446384254428275742","image":{"url":"https:\/\/lh4.googleusercontent.com\/-NQLH1v8dWTM\/AAAAAAAAAAI\/AAAAAAAASU0\/ge8X2VFIcGk\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/105446384254428275742"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/_dqbzeLsGDmg68Pe0rBjV8T35XA\"","geocode":null,"id":"z133szhimvyrynw0u22lj524hmndyjrah04","kind":"plus#activity","object":{"actor":null,"attachments":null,"content":"<b>SolidWorks with PDM and git<\/b><br \/><br \/>Since I last posted on the subject, I&#39;ve been using SolidWorks Workgroup PDM with a number of collaborators. This has taught me even more of the glaring shortcommings of SolidWorks and the gross software-engineering malpractice that is the way SolidWorks handles files and references among files. That said, I&#39;m learning workable workflows, particularly using a version-control system called git. If you&#39;ve ever had to wait for someone to release a file in PDM, wished you had an incremental history of your work, wanted to try a little idea without copying hundreds of megabytes of SolidWorks files, or just wanted an easy way to produce snapshots of PDM, this is for you. If this proves useful, I may expand it and add illustrations.<br \/><br \/>First, you have to overlook a few glaring shortcomings in SolidWorks and PMD: SolidWorks just won&#39;t play nice if you have different files of the same name in the same project, meaning the PDM vault is just one big flat directory. PDM doesn&#39;t do versioning in the sense software people will recognize: you don&#39;t have a history of every version you save unless you give it a unique revision number, so it&#39;s not intended as an &quot;undo history&quot;. PDM doesn&#39;t have a concept of branches; with my software hat on, this is so perposterous I had trouble believing it for weeks. When you check out with PDM, no PDM metadata is stored, so the local copy of the vault becomes just a directory of SolidWorks files; you have to use special &quot;Explorer&quot; software to see that these files had any relation to files in the vault, and on every checkout you have to tell it where to put the files.<br \/><br \/>Here is the workflow I wanted: I have a number of unrelated issues I want to work on. I want to check out from PDM so I know I have an up-to-date version of everyone&#39;s work, then I want to try a few things relating to issue 5, then I want to make changes relating to issue 9, then I want to look at the clean PDM version to study a colleague&#39;s changes, then I want to go back to where I was on issue 5, then I want to roll my colleagues changes into my versions for issue 5, then I may want to commit my changes to PDM. Short of making lots of coppies of full SolidWorks projects, I know no sane way to do all of this other than with git.<br \/><br \/>Git is a version control system designed for software projects. (Although, unlike SolidWorks&#39; own PDM system, it actually stores incremental revisions as differences rather than as new coppies of the files!) Unlike most older version-control systems, it is &quot;distributed&quot; meaning that you have a local copy of the full version history, including being able to locally create branches and perform merges. There is a nice GUI version for Windows, TortoiseGIT, which lets you do everything from Windows Explorer. Here&#39;s how I can do the above:<br \/><br \/>* Create a bare git repository: Create a new folder, CAD.git. Right click on it and say &quot;Git Create repository here...&quot; and click OK.\u00a0<br \/>* Create a text file in CAD.git named &quot;.gitignore&quot; (not &quot;.gitignore.txt&quot;, just &quot;.gitignore&quot;) and paste these three lines into it:<br \/>\u00a0 ~$*.SLDPRT<br \/>\u00a0 ~$*.SLDASM<br \/>\u00a0 .gitignore<br \/>* Open SolidWorks Explorer (or the add-in of the same name within SolidWorks), connect to PDM, select all of the files in the vault, right click and say &quot;Open \/ Check out...&quot;. Select the target-directory column header, click the &quot;...&quot; button at the top next to the directory-entry field, select your CAD.git folder, click &quot;Apply&quot; to assign that to every file. Uncheck &quot;Open&quot; in the bottom right so you just checkout, and click OK. And wait. And wait. There&#39;s no progress bar, but it should be doing something. You can watch the Networking tab in Windows Task Manager to see that it&#39;s actually doing something. When it finishes, your folder should be full of SolidWorks files.\u00a0<br \/>* Right click anywhere in the folder not on a file (or on the CAD.git folder itself from the containing folder) and click &quot;Git Commit -&gt; &quot;master&quot;...&quot;. (This being the first commit, it&#39;ll want your name and email so your commits are linked to you.) You&#39;ll get a commit with a Message field and a list of all of the files you just checked out. They will be unchecked and listed as &quot;Not Versioned&quot;. Click the &quot;Select\/Deselect All&quot; checkbox below to select them all and enter a Message such as &quot;Fresh PDM checkout&quot; and click OK. A progress dialog pops up; click &quot;Close&quot; once it is finished. If you refresh the folder, you should see green checkmarks next to everything. You now have a PDM snapshot that you&#39;ll be able to go back to at any time. (I hear PDM users saying &quot;You can do that!?&quot;)<br \/>Go ahead and open things in SolidWorks if you like, just be sure to close them before doing anything else, since SolidWorks will get exteremely confused if you change files out from under it.<br \/><br \/><br \/><b>Branching<\/b><br \/><br \/>First, make sure SolidWorks is closed before branching.<br \/>Suppose we want to work on issue 5. You could do this by copying the directory to create a sandbox (which, of course, you would do with SolidWorks&#39; &quot;pack and go&quot; because just copying a drectory of SolidWorks files is dicy). Instead, just right click in the folder (not on a file) and select &quot;ToirtoiseGit -&gt; Create Branch...&quot;. Give it a name like issue_5 (no spaces), base it on HEAD (master), which is the default, check &quot;Switch to new branch&quot;, and click OK. (Now if you right click, you&#39;ll see &quot;Git Commit -&gt; &quot;issue_5&quot;...&quot; on the list rather than &quot;Git Commit -&gt; &quot;master&quot;...&quot;.)<br \/>Now do your work on issue 5; you are in a sandbox. (Note: It will make life easier later if you don&#39;t rebuild large assemblies.) Incrementally, you can check in your changes by doing &quot;Git Commit -&gt; &quot;issue_5&quot;...&quot;, making sure that if you create new files, you check the box for them under &quot;Not Versioned&quot;.<br \/><br \/><b>Now for the magic.<\/b> You want to see what changes someone has made. Close SolidWorks. Commit your changes to git then right click and do &quot;TortoiseGit -&gt; Switch\/Checkout...&quot; and select &quot;master&quot; from the Branch dropdown. You get a progress bar (click &quot;Close&quot; when it&#39;s done). You have now magically been transported to where you were when you created the branch. If you want to work in a different sandbox, you can create a new branch for issue 9 by following the instructions above that created the issue_5 branch, remembering to check the &quot;Switch to new branch&quot; box. You can work on the issue_9 branch for a while, commiting changes as you go.<br \/>If you want to see what you did for issue_5 or want to see the master branch, you can just close SolidWorks and use &quot;TortoiseGit -&gt; Switch\/Checkout...&quot; to switch to a different branch. Just remember to close SolidWorks while you switch.<br \/><br \/><br \/><b>Updating PDM<\/b><br \/><br \/>Let&#39;s suppose a colleague made a change in PDM and we want to look at it. Close SolidWorks. With TortoiseGit, switch to the master branch. You can now use PDM to update from the vault. (Caveat: PDM uses timestamps to determined changedness and git doesn&#39;t restore timestamps, so while the files have exactly the same as before, PDM may think it needs to update them. Just download everything it is confused about, overwriting what it thinks are local changes.) Git Commit this with a message like &quot;update from PDM&quot;. Now you can open SolidWorks and see what your colleague changed.<br \/><br \/><br \/><b>Merging Changes<\/b><br \/><br \/>Suppose to complete your issue_5 changes, you need to be working against the latest version you just got from your colleague. Close SolidWorks, use git to switch to your issue_5 branch, right click in the folder and do &quot;TortoiseGit -&gt; Merge...&quot; and select &quot;master&quot; as the branch. As long as you and your colleague worked on different files, it will smoothly update all of the files they touched without messing with your files. If there are conflicts, it will fail and you&#39;ll have to tell it which version to use. (I won&#39;t go into that now, but it&#39;s managable.)<br \/><br \/><br \/><b>Commiting changes to PDM<\/b><br \/><br \/>Once I&#39;ve finished my changes for issue_5, I can commit them to PDM as follows. First close SolidWorks. Next, switch to the master branch. Then use SolidWorks Explorer, take ownership of (acquire write access to) the files we need to change. Then &quot;TortoiseGit -&gt; Merge...&quot; and select &quot;issue_5&quot; as the source branch. From a SolidWorks\/PDM perspective, that merge step was all of your edits all at once. Make sure you like what you have and then do a PDM commit.<br \/><br \/><br \/><b>Best Practices<\/b><br \/><br \/>This workflow seems to work so long as you follow two rules: 1. Only do PDM operations when you are in the master branch. 2. Other than git commits, only do git operations when SolidWorks is closed. The first of these isn&#39;t strictly necessary, but it makes git&#39;s revision history make sense: this way, other peoples&#39; changes only come through the master branch. The second of these, closing SolidWorks, is because SolidWorks is an idiosyncratic program that doesn&#39;t tolerate files being changed out from under it.<br \/><br \/><br \/><b>Rough Edges<\/b><br \/><br \/>So far, the above workflow works fairly well. The biggest gotcha is merging. First, SolidWorks has no good merge tools that I know of. There is a compare-files tool (in the SolidWorks Utilities add-in), but if I put a hole in a part and you put a fillet on the same part, I know of no automated way to recombine those files into one with the hole and the fillet. Because of that shortcoming on SolidWorks&#39; part, you still have to have one person at a time make changes to parts. (On the other hand, mechanical parts aren&#39;t like software source files: I can&#39;t expect that adding a hole and a fillet will result in a viable part in the same way I can expect that adding two functions to the same source file is safe.) On merging, TortoiseGit does let you check out the base and both modified versions of a file that fails to merge, giving all three distinct names, so you can open them up in SolidWorks and figure out what&#39;s going on. (Right click on the file, &quot;TortoiseGit -&gt; Edit conflict&quot;; it will bring up a text-merge dialog that will fail, then leave you in the directory with three new files. If the file was foo.SLDPRT, you&#39;ll then also see foo.SLDPRT.BASE.SLDPRT, foo.SLDPRT.LOCAL.SLDPRT, and foo.SLDPRT.REMOTE.SLDPRT. You then have to replace foo.SLDPRT with the appropriate one of those three, then right click on that file and click &quot;TortoiseGit -&gt; Resolve...&quot; and select only that file to tell git which version you want to use.)<br \/>In addition, SolidWorks part and assembly files include both the steps to make part and a cache of the part geometry itself (and other stuff like its 3D orientation when the part opens). As a result, changing a part file just changes that file, but if you then open an assembly that includes that part, it will automatically be rebuilt, so saving the assembly changes the assembly file. This makes sense in that the 3D geometry of the assembly changed, but it is a problem in that the highest-level-assembly file can get modified if you change the geometry of a little screw used in a sub-sub assembly, even if nothing logically changed in the top-level assembly. If I change one screw and you change another screw and we both check in the top-level assembly, merging our changes will conflict. For this reason, I try to only rebuild high-level assemblies when necessary, and try to remember which files I actually changed versus which parts look like they changed because subcomponents changed. Fortunately, if you&#39;ve just been making small changes to subcomponents, if you merge using one of the base assemblies, when you rebuild it, it should include all changes.<br \/><br \/><br \/><b>Future Work<\/b><br \/><br \/>It would be very nice if there were SolidWorks tools to merge files, or even just to identify assemblies that actually changed as opposed to assemblies that changed. SolidWorks files seem to be built on the Microsoft Structured Storage format (basically just a .tar file). I imagine identifying real changes to assembly files wouldn&#39;t be too hard.\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z133szhimvyrynw0u22lj524hmndyjrah04\/people\/plusoners","totalItems":3},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z133szhimvyrynw0u22lj524hmndyjrah04\/comments","totalItems":7},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z133szhimvyrynw0u22lj524hmndyjrah04\/people\/resharers","totalItems":2},"url":"https:\/\/plus.google.com\/105446384254428275742\/posts\/5VnStcG1nQn"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2012-08-27T12:28:30.633Z","radius":null,"title":"SolidWorks with PDM and git\n\nSince I last posted on the subject, I've been using SolidWorks Workgroup...","updated":"2012-08-27T12:28:30.633Z","url":"https:\/\/plus.google.com\/105446384254428275742\/posts\/5VnStcG1nQn","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Dwaraka Nath","id":"117912746833392353256","image":{"url":"https:\/\/lh6.googleusercontent.com\/-VkX8BcZHP2k\/AAAAAAAAAAI\/AAAAAAAAC3M\/lfS3GdsN3hQ\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/117912746833392353256"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/wE135BYjcmEKq-AYCkEV7OIsnVE\"","geocode":null,"id":"z130yfdbqrixc1mpb04cenv5nv2otzibhv00k","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"Hello,. This is a post about how you can put your code in a version system on a local folder of your file system. There are a bunch of versioning systems out there like Git, CVS and Subversion. I will discuss how to put your code in a Git repository. Before we can start, we need a new project.","displayName":"Creating a new Git repository on a local file system | Treeleaf Media Blog","embed":null,"fullImage":null,"id":null,"image":null,"objectType":"article","thumbnails":null,"url":"http:\/\/treeleaf.be\/blog\/2011\/03\/creating-a-new-git-repository-on-a-local-file-system\/"}],"content":"Git Repo in local machine\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z130yfdbqrixc1mpb04cenv5nv2otzibhv00k\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z130yfdbqrixc1mpb04cenv5nv2otzibhv00k\/comments","totalItems":0},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z130yfdbqrixc1mpb04cenv5nv2otzibhv00k\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/117912746833392353256\/posts\/V2ieMPWj3Da"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2013-10-15T12:41:38.269Z","radius":null,"title":"Git Repo in local machine","updated":"2013-10-15T12:41:38.269Z","url":"https:\/\/plus.google.com\/117912746833392353256\/posts\/V2ieMPWj3Da","verb":"post"},{"access":{"description":"Fedora Project (Discussion)","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Thiago Mosqueiro","id":"111869142540078274000","image":{"url":"https:\/\/lh6.googleusercontent.com\/-lBtQpfPMQjE\/AAAAAAAAAAI\/AAAAAAAAChE\/NHEP2bS3z2M\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/111869142540078274000"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/LUin4sLtirVLw89QUwdMigxKHCY\"","geocode":null,"id":"z12pfndbpny1en1so225gvn5lwj5ixgyr04","kind":"plus#activity","object":{"actor":null,"attachments":null,"content":"Fedora friends,<br \/>I&#39;m looking for some advice on how mercurial\/git may work within dropbox folders without possible incompatibilities.<br \/><br \/>Let me explain a little further. I write lots of codes and generate my results (data) to later write reports\/papers. Over the years, I have been using dropbox to guarantee safe copies of all data files, program codes and papers. But I would like to use a versioning system, such as mercurial or git. According to several articles over the internet the .hg (in mercurial) folder can get &#39;corrumped&#39; by dropbox management over sync process (I google this subject every once in a while to check new ideas). I&#39;m not trying to make dropbox sync my versioning (as some people on google), I&#39;d use BitBucket\/GitHub with no problems. The thing is, I&#39;d like to not move my stuff outside dropbox.<br \/><br \/>Today, it is becoming more and more indispensable to me a versioning system taking care of all my versions. Any of you have any experience\/tips on this?\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12pfndbpny1en1so225gvn5lwj5ixgyr04\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12pfndbpny1en1so225gvn5lwj5ixgyr04\/comments","totalItems":7},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12pfndbpny1en1so225gvn5lwj5ixgyr04\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/111869142540078274000\/posts\/4Madi4LiReq"},"placeId":null,"placeName":null,"provider":{"title":"Community"},"published":"2013-02-05T00:40:11.738Z","radius":null,"title":"Fedora friends,\nI'm looking for some advice on how mercurial\/git may work within dropbox folders without...","updated":"2013-02-05T00:40:11.738Z","url":"https:\/\/plus.google.com\/111869142540078274000\/posts\/4Madi4LiReq","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Wayne Radinsky","id":"104401121686781166984","image":{"url":"https:\/\/lh5.googleusercontent.com\/-kJzt1ORbE-E\/AAAAAAAAAAI\/AAAAAAAACi4\/R3VAptXgPB8\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/104401121686781166984"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/_CdLmA0FBBA4dQfwCyDw0jzuq5Y\"","geocode":null,"id":"z13aer1qisild5htv222t5xbymrwwdfzd04","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"A versioning filesystem inspired by Git. Contribute to phoenixfs development by creating an account on GitHub.","displayName":"phoenixfs","embed":null,"fullImage":null,"id":null,"image":null,"objectType":"article","thumbnails":null,"url":"https:\/\/github.com\/artagnon\/phoenixfs"}],"content":"Phoenixfs is a Unix file system with versioning based on the way git works.\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13aer1qisild5htv222t5xbymrwwdfzd04\/people\/plusoners","totalItems":2},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13aer1qisild5htv222t5xbymrwwdfzd04\/comments","totalItems":3},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13aer1qisild5htv222t5xbymrwwdfzd04\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/104401121686781166984\/posts\/AwZ6547tWTV"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2012-08-28T15:10:59.515Z","radius":null,"title":"Phoenixfs is a Unix file system with versioning based on the way git works.","updated":"2012-08-28T15:10:59.515Z","url":"https:\/\/plus.google.com\/104401121686781166984\/posts\/AwZ6547tWTV","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Lucas Kahlert","id":"115387408564842755837","image":{"url":"https:\/\/lh3.googleusercontent.com\/-t9_yrw8tc8I\/AAAAAAAAAAI\/AAAAAAAAAVA\/0p1xWU9xH8o\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/115387408564842755837"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/doCTBlnrtvdH3jfGVBk7biVGeok\"","geocode":null,"id":"z12gwp2r2l22vvm2m225szq5lo2zgb0km","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"A successful Git branching model. http:\/\/nvie.com\/posts\/a-successful-git-branching-model\/. Published: January 05, 2010. Published: January 05, 2010. In this post I present the development model that I've introduced for all of my projects (both at work and private) about a year ago, and which has ...","displayName":"A successful Git branching model \u00bb","embed":null,"fullImage":{"height":null,"type":"image\/jpeg","url":"http:\/\/nvie.com\/img\/2009\/12\/Screen-shot-2009-12-24-at-11.32.03.png","width":null},"id":null,"image":{"height":120,"type":"image\/jpeg","url":"https:\/\/lh6.googleusercontent.com\/proxy\/k4nqKQ5pRG_qvNJy12Gx4Sf-lGvABhc0XqnLRvrZLooPu3nTLeGdNHOObqDWhCOt--EOIxK8mq4AQTtKVnN0E5zD3f0oIB3zTXbRB-zGdF0f1w=w120-h120","width":120},"objectType":"article","thumbnails":null,"url":"http:\/\/nvie.com\/posts\/a-successful-git-branching-model\/"}],"content":"I&#39;ve searched for a versioning system for my (personal) projects using Git as SCM. This blog post introduces a very convincing system. I think I&#39;ll give it a try ...\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12gwp2r2l22vvm2m225szq5lo2zgb0km\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12gwp2r2l22vvm2m225szq5lo2zgb0km\/comments","totalItems":0},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12gwp2r2l22vvm2m225szq5lo2zgb0km\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/115387408564842755837\/posts\/EozkvNxWhMS"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2014-01-20T01:11:18.628Z","radius":null,"title":"I've searched for a versioning system for my (personal) projects using Git as SCM. This blog post introduces...","updated":"2014-01-20T01:11:18.628Z","url":"https:\/\/plus.google.com\/115387408564842755837\/posts\/EozkvNxWhMS","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"North River Geographic Systems, Inc","id":"117520268130270136474","image":{"url":"https:\/\/lh5.googleusercontent.com\/-azHpQFjChlk\/AAAAAAAAAAI\/AAAAAAAAAGE\/YJFwoxDixfw\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/117520268130270136474"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/uqeeR5jQSnXcRQ4-SKa0qEG_G_4\"","geocode":null,"id":"z12ujpuxnmmyvr4ks222d3pxnz32tv35s04","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"Welcome to the GeoGit project, exploring the use of distributed management of spatial data. GeoGit draws inspiration from Git, but adapts its core concepts to handle versioning of geospatial data. Users are able to import raw geospatial data (currently from Shapefiles, PostGIS or SpatiaLite) in ...","displayName":"GeoGit by opengeo","embed":null,"fullImage":null,"id":null,"image":null,"objectType":"article","thumbnails":null,"url":"http:\/\/geogit.org\/"}],"content":"Versioning for the rest of us<br \/><br \/> <a rel=\"nofollow\" class=\"ot-hashtag\" href=\"https:\/\/plus.google.com\/s\/%23postgis\">#postgis<\/a> \u00a0 <a rel=\"nofollow\" class=\"ot-hashtag\" href=\"https:\/\/plus.google.com\/s\/%23git\">#git<\/a> \u00a0 <a rel=\"nofollow\" class=\"ot-hashtag\" href=\"https:\/\/plus.google.com\/s\/%23gis\">#gis<\/a> \u00a0\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12ujpuxnmmyvr4ks222d3pxnz32tv35s04\/people\/plusoners","totalItems":1},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12ujpuxnmmyvr4ks222d3pxnz32tv35s04\/comments","totalItems":0},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12ujpuxnmmyvr4ks222d3pxnz32tv35s04\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/117520268130270136474\/posts\/53EK78aH14P"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2013-08-03T17:13:01.506Z","radius":null,"title":"Versioning for the rest of us\n\n#postgis \u00a0 #git \u00a0 #gis \u00a0","updated":"2013-08-03T17:13:01.506Z","url":"https:\/\/plus.google.com\/117520268130270136474\/posts\/53EK78aH14P","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Ricardo Pietrobon","id":"106268032364497388036","image":{"url":"https:\/\/lh4.googleusercontent.com\/-17Io5bGKllA\/AAAAAAAAAAI\/AAAAAAAAnCQ\/NK06JhxlrpE\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/106268032364497388036"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/XEawAeLIg8lxlEphi-XXm2xQGs4\"","geocode":null,"id":"z12utb1yswetf3dhd04cft2ziqrnzj345aw","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"Using Dropbox as a Git repository. April 16, 2012 \u2022 \u221e. I use github heavily, but I have a couple projects that I like to work on across multiple machines, but don't necessarily want to share them ...","displayName":"Using Dropbox as a Git repository \u2013 Roger Stringer","embed":null,"fullImage":null,"id":null,"image":null,"objectType":"article","thumbnails":null,"url":"http:\/\/rogerstringer.com\/2012\/04\/16\/using-dropbox-as-a-git-repository"}],"content":"so, here is an idea:<br \/><br \/>1. mentors would have their scripts on both google drive as well as github -- I think <span class=\"proflinkWrapper\"><span class=\"proflinkPrefix\">+<\/span><a class=\"proflink\" href=\"https:\/\/plus.google.com\/111779761317631192938\" oid=\"111779761317631192938\">Joao Ricardo Nickenig Vissoci<\/a><\/span>\u00a0and I are already doing this. mentors would obviously handle git in any way they might want, terminal or clients<br \/>2. for clinical researchers, we would then simply share the scripts with them through google drive. every time they make a modification, that modification would come straight to our google drive directories<br \/>3. mentors would know that a change was made since (a) this would show up on our git versioning system and (2) we can check who did what within google drive<br \/><br \/>the most important thing is that for clinical researchers the entire process would be seamless: they have to check the script in their google drives, nothing else.<br \/><br \/>as for the handling of issues, i think i can get the message across with a simple 3-min video, it&#39;s just that they are not used to using forums. what do you think?\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12utb1yswetf3dhd04cft2ziqrnzj345aw\/people\/plusoners","totalItems":1},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12utb1yswetf3dhd04cft2ziqrnzj345aw\/comments","totalItems":2},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12utb1yswetf3dhd04cft2ziqrnzj345aw\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/106268032364497388036\/posts\/VKM2JamF3vU"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2012-06-02T22:43:50.096Z","radius":null,"title":"so, here is an idea:\n\n1. mentors would have their scripts on both google drive as well as github -- ...","updated":"2012-06-02T22:43:50.096Z","url":"https:\/\/plus.google.com\/106268032364497388036\/posts\/VKM2JamF3vU","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Ori Peleg","id":"106709595689600504649","image":{"url":"https:\/\/lh3.googleusercontent.com\/-rkNKN1ix2XE\/AAAAAAAAAAI\/AAAAAAAAKs4\/7-C-cwrfSgU\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/106709595689600504649"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/N7OgDPKm1-cq8g-xPQN8aHG-FDM\"","geocode":null,"id":"z133vdxb3ym0xjfnf23mipc5kmnnwrfki","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"At Onavo\u00a0we version our Android and iOS apps with git tags (inspired by\u00a0Fraser Hess). No more mucking about with manifests and plists in short-lived branches.  Our release git tags look like abc1.2.3-foo_15_bar, which transla...","displayName":"Versioning Android apps with git tags, using the new Gradle-based build system","embed":null,"fullImage":null,"id":null,"image":null,"objectType":"article","thumbnails":null,"url":"http:\/\/orip.org\/2013\/10\/versioning-android-apps-with-git-tags.html"}],"content":"<span class=\"proflinkWrapper\"><span class=\"proflinkPrefix\">+<\/span><a class=\"proflink\" href=\"https:\/\/plus.google.com\/108284392618554783657\" oid=\"108284392618554783657\">Jake Wharton<\/a><\/span>\u00a0shared his Gradle hacks, which inspired me to share mine.<br \/><br \/>At <span class=\"proflinkWrapper\"><span class=\"proflinkPrefix\">+<\/span><a class=\"proflink\" href=\"https:\/\/plus.google.com\/113688574919844929175\" oid=\"113688574919844929175\">Onavo<\/a><\/span>\u00a0we version our Android apps completely through git tags, no editing manifest or gradle files: tag <b>myapp1.2.3-rc1_22<\/b> becomes versionName &#39;1.2.3-rc1&#39; and versionCode 22.<br \/><br \/>We also make sure our apk filenames contain the version and git information.<br \/><br \/> <a rel=\"nofollow\" class=\"ot-hashtag\" href=\"https:\/\/plus.google.com\/s\/%23androiddev\">#androiddev<\/a> \u00a0\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z133vdxb3ym0xjfnf23mipc5kmnnwrfki\/people\/plusoners","totalItems":2},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z133vdxb3ym0xjfnf23mipc5kmnnwrfki\/comments","totalItems":1},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z133vdxb3ym0xjfnf23mipc5kmnnwrfki\/people\/resharers","totalItems":8},"url":"https:\/\/plus.google.com\/106709595689600504649\/posts\/JxaB2DL75DY"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2013-10-07T18:21:31.841Z","radius":null,"title":"+Jake Wharton\u00a0shared his Gradle hacks, which inspired me to share mine.\n\nAt +Onavo\u00a0we version our Android...","updated":"2013-10-07T18:21:31.841Z","url":"https:\/\/plus.google.com\/106709595689600504649\/posts\/JxaB2DL75DY","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Colin Miller","id":"101953659294060773040","image":{"url":"https:\/\/lh5.googleusercontent.com\/-piNFTChT1zc\/AAAAAAAAAAI\/AAAAAAAAvtc\/OfNJoXy4how\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/101953659294060773040"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/ocNl12ZstHLmulAtLjfmhmNBVKA\"","geocode":null,"id":"z13vj5hhzpe2fvjps04cd1qzenr2iniwizo0k","kind":"plus#activity","object":{"actor":null,"attachments":null,"content":"<b>hate<\/b> subversion.<br \/><br \/>Biggest piece of crap ever. Anyone who argued that it&#39;s good or &#39;not that bad&#39; is wrong. I&#39;m sorry, but if you think subversion is a good tool, you&#39;re wrong.<br \/><br \/>Today I attempted to commit a merge. It had a few conflicts but I resolved those. When I went to commit, the commit failed. But it failed after committing <b>some<\/b> of the files (though not all). The fact that a commit operation is not atomic is retarded. It literally stunts growth. It puts the branch in an unknown and pretty much unusable state. It&#39;s also annoying to fix (still working on it).<br \/><br \/>The faster the world moves away from central version control systems like CVS or Subversion and on to distributed version control systems like git or bazaar the better. Heck, in git each commit is cryptographically signed and guaranteed to be atomic. It either all works, or doesn&#39;t. Yet subversion can mess up your tree. What year is it?!<br \/><br \/>#subversioncandieinafire #wishhashtagsworkedingoogleplus #hatesubversion\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13vj5hhzpe2fvjps04cd1qzenr2iniwizo0k\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13vj5hhzpe2fvjps04cd1qzenr2iniwizo0k\/comments","totalItems":2},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13vj5hhzpe2fvjps04cd1qzenr2iniwizo0k\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/101953659294060773040\/posts\/XrmQieL8TMX"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2011-09-22T04:17:58.908Z","radius":null,"title":"hate subversion.\n\nBiggest piece of crap ever. Anyone who argued that it's good or 'not that bad' is ...","updated":"2011-09-22T04:17:58.908Z","url":"https:\/\/plus.google.com\/101953659294060773040\/posts\/XrmQieL8TMX","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Kevin Searle","id":"103489611032872205124","image":{"url":"https:\/\/lh3.googleusercontent.com\/-jKw7BpIH1yo\/AAAAAAAAAAI\/AAAAAAAAECw\/IMx_3Vd__PQ\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/103489611032872205124"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/hAgKRm1uKcsM7tpNvdUvEbf2hQE\"","geocode":null,"id":"z12menbiolbjvdbj304cdrqr0vfpfzrz4tk0k","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"Advertise here with BSA Git, Subversion and other version control systems are great for managing projects within a team and making sure that everyone in the team gets the latest versions of each file.\nHowever, versioning databases is not a built-in feature in such systems and they should definitely be synchronized too.\nDBV is an open source and PHP-powered application that can help us include databases in to the version control system we are usin...","displayName":"PHP-Powered Version Control System For Databases \u2013 DBV","embed":null,"fullImage":{"height":null,"type":"image\/jpeg","url":"http:\/\/www.webresourcesdepot.com\/wp-content\/uploads\/2012\/11\/database_version_control.jpg","width":null},"id":null,"image":{"height":120,"type":"image\/jpeg","url":"https:\/\/lh5.googleusercontent.com\/proxy\/3vrJ9fxbJaQNX7GzZntKyEI-6nmPwEihvnm-8t69OJ7PMLSga4imuaicJ3bMnU7J0eKynvBogew3HpTlLIp8UR269Z2dwMp2IHw8e42p2zMh1hv9CuBQT7n6hbESbk8ezCzuXXqzpss=w120-h120","width":120},"objectType":"article","thumbnails":null,"url":"http:\/\/www.webresourcesdepot.com\/php-powered-version-control-system-for-databases-dbv\/"}],"content":"Anyone used something like this?\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12menbiolbjvdbj304cdrqr0vfpfzrz4tk0k\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12menbiolbjvdbj304cdrqr0vfpfzrz4tk0k\/comments","totalItems":0},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12menbiolbjvdbj304cdrqr0vfpfzrz4tk0k\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/103489611032872205124\/posts\/f1Qz63y4sjZ"},"placeId":null,"placeName":null,"provider":{"title":"Google Reader"},"published":"2012-11-23T11:44:48.916Z","radius":null,"title":"Anyone used something like this?","updated":"2012-11-23T11:44:48.916Z","url":"https:\/\/plus.google.com\/103489611032872205124\/posts\/f1Qz63y4sjZ","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Iv\u00e1n Escriv\u00e1","id":"103252362788868123968","image":{"url":"https:\/\/lh4.googleusercontent.com\/-OnQLNm1R4Tg\/AAAAAAAAAAI\/AAAAAAAAFfs\/jTpQmfjN2W0\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/103252362788868123968"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/PSbdE3ORyv-_lUWBCCBFrUDseMo\"","geocode":null,"id":"z13yd5bhivv1hx5mi223idg4vsz5ijsj404","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"A successful Git branching model. http:\/\/nvie.com\/posts\/a-successful-git-branching-model\/. Published: January 05, 2010. Published: January 05, 2010. In this post I present the development model that I...","displayName":"A successful Git branching model \u00bb","embed":null,"fullImage":{"height":null,"type":"image\/jpeg","url":"http:\/\/nvie.com\/img\/2009\/12\/Screen-shot-2009-12-24-at-11.32.03.png","width":null},"id":null,"image":{"height":120,"type":"image\/jpeg","url":"https:\/\/lh6.googleusercontent.com\/proxy\/k4nqKQ5pRG_qvNJy12Gx4Sf-lGvABhc0XqnLRvrZLooPu3nTLeGdNHOObqDWhCOt--EOIxK8mq4AQTtKVnN0E5zD3f0oIB3zTXbRB-zGdF0f1w=w120-h120","width":120},"objectType":"article","thumbnails":null,"url":"http:\/\/nvie.com\/posts\/a-successful-git-branching-model\/"}],"content":"A successful Git branching model<br \/><a href=\"http:\/\/nvie.com\/posts\/a-successful-git-branching-model\/\">http:\/\/nvie.com\/posts\/a-successful-git-branching-model\/<\/a><br \/><br \/>In this post I present the development model that I\u2019ve introduced for all of my projects (both at work and private) about a year ago, and which has turned out to be very successful. I\u2019ve been meaning to write about it for a while now, but I\u2019ve never really found the time to do so thoroughly, until now. I won\u2019t talk about any of the projects\u2019 details, merely about the branching strategy and release management.<br \/><br \/>It focuses around Git as the tool for the versioning of all of our source code.<br \/>Why git?<br \/><br \/>For a thorough discussion on the pros and cons of Git compared to centralized source code control systems, see the web. There are plenty of flame wars going on there. As a developer, I prefer Git above all other tools around today. Git really changed the way developers think of merging and branching. From the classic CVS\/Subversion world I came from, merging\/branching has always been considered a bit scary (\u201cbeware of merge conflicts, they bite you!\u201d) and something you only do every once in a while.<br \/><br \/>But with Git, these actions are extremely cheap and simple, and they are considered one of the core parts of your daily workflow, really. For example, in CVS\/Subversion books, branching and merging is first discussed in the later chapters (for advanced users), while in every Git book, it\u2019s already covered in chapter 3 (basics).<br \/><br \/>As a consequence of its simplicity and repetitive nature, branching and merging are no longer something to be afraid of. Version control tools are supposed to assist in branching\/merging more than anything else.<br \/><br \/>Enough about the tools, let\u2019s head onto the development model. The model that I\u2019m going to present here is essentially no more than a set of procedures that every team member has to follow in order to come to a managed software development process.<br \/>Decentralized but centralized<br \/><br \/>The repository setup that we use and that works well with this branching model, is that with a central \u201ctruth\u201d repo. Note that this repo is only considered to be the central one (since Git is a DVCS, there is no such thing as a central repo at a technical level). We will refer to this repo as origin, since this name is familiar to all Git users.<br \/><br \/>Each developer pulls and pushes to origin. But besides the centralized push-pull relationships, each developer may also pull changes from other peers to form sub teams. For example, this might be useful to work together with two or more developers on a big new feature, before pushing the work in progress to origin prematurely. In the figure above, there are subteams of Alice and Bob, Alice and David, and Clair and David.<br \/><br \/>Technically, this means nothing more than that Alice has defined a Git remote, named bob, pointing to Bob\u2019s repository, and vice versa.<br \/>The main branches<br \/><br \/>At the core, the development model is greatly inspired by existing models out there. The central repo holds two main branches with an infinite lifetime:<br \/><br \/>\u00a0\u00a0\u00a0 master<br \/>\u00a0\u00a0\u00a0 develop<br \/><br \/>The master branch at origin should be familiar to every Git user. Parallel to the master branch, another branch exists called develop.<br \/><br \/>We consider origin\/master to be the main branch where the source code of HEAD always reflects a production-ready state.<br \/><br \/>We consider origin\/develop to be the main branch where the source code of HEAD always reflects a state with the latest delivered development changes for the next release. Some would call this the \u201cintegration branch\u201d. This is where any automatic nightly builds are built from.<br \/><br \/>When the source code in the develop branch reaches a stable point and is ready to be released, all of the changes should be merged back into master somehow and then tagged with a release number. How this is done in detail will be discussed further on.<br \/><br \/>Therefore, each time when changes are merged back into master, this is a new production release by definition. We tend to be very strict at this, so that theoretically, we could use a Git hook script to automatically build and roll-out our software to our production servers everytime there was a commit on master.<br \/>Supporting branches<br \/><br \/>Next to the main branches master and develop, our development model uses a variety of supporting branches to aid parallel development between team members, ease tracking of features, prepare for production releases and to assist in quickly fixing live production problems. Unlike the main branches, these branches always have a limited life time, since they will be removed eventually.<br \/><br \/>The different types of branches we may use are:<br \/><br \/>\u00a0\u00a0\u00a0 Feature branches<br \/>\u00a0\u00a0\u00a0 Release branches<br \/>\u00a0\u00a0\u00a0 Hotfix branches<br \/><br \/>Each of these branches have a specific purpose and are bound to strict rules as to which branches may be their originating branch and which branches must be their merge targets. We will walk through them in a minute.<br \/><br \/>By no means are these branches \u201cspecial\u201d from a technical perspective. The branch types are categorized by how we use them. They are of course plain old Git branches.<br \/>Feature branches<br \/><br \/>May branch off from: develop<br \/>Must merge back into: develop<br \/>Branch naming convention: anything except master, develop, release-<b>, or hotfix-<\/b><br \/><br \/>Feature branches (or sometimes called topic branches) are used to develop new features for the upcoming or a distant future release. When starting development of a feature, the target release in which this feature will be incorporated may well be unknown at that point. The essence of a feature branch is that it exists as long as the feature is in development, but will eventually be merged back into develop (to definitely add the new feature to the upcoming release) or discarded (in case of a disappointing experiment).<br \/><br \/>Feature branches typically exist in developer repos only, not in origin.<br \/>Creating a feature branch<br \/><br \/>When starting work on a new feature, branch off from the develop branch.<br \/><br \/>$ git checkout -b myfeature develop<br \/>Switched to a new branch &quot;myfeature&quot;<br \/><br \/>Incorporating a finished feature on develop<br \/><br \/>Finished features may be merged into the develop branch definitely add them to the upcoming release:<br \/><br \/>$ git checkout develop<br \/>Switched to branch &#39;develop&#39;<br \/>$ git merge --no-ff myfeature<br \/>Updating ea1b82a..05e9557<br \/>(Summary of changes)<br \/>$ git branch -d myfeature<br \/>Deleted branch myfeature (was 05e9557).<br \/>$ git push origin develop<br \/><br \/>The --no-ff flag causes the merge to always create a new commit object, even if the merge could be performed with a fast-forward. This avoids losing information about the historical existence of a feature branch and groups together all commits that together added the feature. Compare:<br \/><br \/>In the latter case, it is impossible to see from the Git history which of the commit objects together have implemented a feature\u2014you would have to manually read all the log messages. Reverting a whole feature (i.e. a group of commits), is a true headache in the latter situation, whereas it is easily done if the --no-ff flag was used.<br \/><br \/>Yes, it will create a few more (empty) commit objects, but the gain is much bigger that that cost.<br \/><br \/>Unfortunately, I have not found a way to make --no-ff the default behaviour of git merge yet, but it really should be.<br \/>Release branches<br \/><br \/>May branch off from: develop<br \/>Must merge back into: develop and master<br \/>Branch naming convention: release-*<br \/><br \/>Release branches support preparation of a new production release. They allow for last-minute dotting of i\u2019s and crossing t\u2019s. Furthermore, they allow for minor bug fixes and preparing meta-data for a release (version number, build dates, etc.). By doing all of this work on a release branch, the develop branch is cleared to receive features for the next big release.<br \/><br \/>The key moment to branch off a new release branch from develop is when develop (almost) reflects the desired state of the new release. At least all features that are targeted for the release-to-be-built must be merged in to develop at this point in time. All features targeted at future releases may not\u2014they must wait until after the release branch is branched off.<br \/><br \/>It is exactly at the start of a release branch that the upcoming release gets assigned a version number\u2014not any earlier. Up until that moment, the develop branch reflected changes for the \u201cnext release\u201d, but it is unclear whether that \u201cnext release\u201d will eventually become 0.3 or 1.0, until the release branch is started. That decision is made on the start of the release branch and is carried out by the project\u2019s rules on version number bumping.<br \/>Creating a release branch<br \/><br \/>Release branches are created from the develop branch. For example, say version 1.1.5 is the current production release and we have a big release coming up. The state of develop is ready for the \u201cnext release\u201d and we have decided that this will become version 1.2 (rather than 1.1.6 or 2.0). So we branch off and give the release branch a name reflecting the new version number:<br \/><br \/>$ git checkout -b release-1.2 develop<br \/>Switched to a new branch &quot;release-1.2&quot;<br \/>$ .\/bump-version.sh 1.2<br \/>Files modified successfully, version bumped to 1.2.<br \/>$ git commit -a -m &quot;Bumped version number to 1.2&quot;<br \/>[release-1.2 74d9424] Bumped version number to 1.2<br \/>1 files changed, 1 insertions(+), 1 deletions(-)<br \/><br \/>After creating a new branch and switching to it, we bump the version number. Here, bump-version.sh is a fictional shell script that changes some files in the working copy to reflect the new version. (This can of course be a manual change\u2014the point being that some files change.) Then, the bumped version number is committed.<br \/><br \/>This new branch may exist there for a while, until the release may be rolled out definitely. During that time, bug fixes may be applied in this branch (rather than on the develop branch). Adding large new features here is strictly prohibited. They must be merged into develop, and therefore, wait for the next big release.<br \/>Finishing a release branch<br \/><br \/>When the state of the release branch is ready to become a real release, some actions need to be carried out. First, the release branch is merged into master (since every commit on master is a new release by definition, remember). Next, that commit on master must be tagged for easy future reference to this historical version. Finally, the changes made on the release branch need to be merged back into develop, so that future releases also contain these bug fixes.<br \/><br \/>The first two steps in Git:<br \/><br \/>$ git checkout master<br \/>Switched to branch &#39;master&#39;<br \/>$ git merge --no-ff release-1.2<br \/>Merge made by recursive.<br \/>(Summary of changes)<br \/>$ git tag -a 1.2<br \/><br \/>The release is now done, and tagged for future reference.<br \/>Edit: You might as well want to use the -s or -u &lt;key&gt; flags to sign your tag cryptographically.<br \/><br \/>To keep the changes made in the release branch, we need to merge those back into develop, though. In Git:<br \/><br \/>$ git checkout develop<br \/>Switched to branch &#39;develop&#39;<br \/>$ git merge --no-ff release-1.2<br \/>Merge made by recursive.<br \/>(Summary of changes)<br \/><br \/>This step may well lead to a merge conflict (probably even, since we have changed the version number). If so, fix it and commit.<br \/><br \/>Now we are really done and the release branch may be removed, since we don\u2019t need it anymore:<br \/><br \/>$ git branch -d release-1.2<br \/>Deleted branch release-1.2 (was ff452fe).<br \/><br \/>Hotfix branches<br \/><br \/>May branch off from: master<br \/>Must merge back into: develop and master<br \/>Branch naming convention: hotfix-*<br \/><br \/>Hotfix branches are very much like release branches in that they are also meant to prepare for a new production release, albeit unplanned. They arise from the necessity to act immediately upon an undesired state of a live production version. When a critical bug in a production version must be resolved immediately, a hotfix branch may be branched off from the corresponding tag on the master branch that marks the production version.<br \/><br \/>The essence is that work of team members (on the develop branch) can continue, while another person is preparing a quick production fix.<br \/>Creating the hotfix branch<br \/><br \/>Hotfix branches are created from the master branch. For example, say version 1.2 is the current production release running live and causing troubles due to a severe bug. But changes on develop are yet unstable. We may then branch off a hotfix branch and start fixing the problem:<br \/><br \/>$ git checkout -b hotfix-1.2.1 master<br \/>Switched to a new branch &quot;hotfix-1.2.1&quot;<br \/>$ .\/bump-version.sh 1.2.1<br \/>Files modified successfully, version bumped to 1.2.1.<br \/>$ git commit -a -m &quot;Bumped version number to 1.2.1&quot;<br \/>[hotfix-1.2.1 41e61bb] Bumped version number to 1.2.1<br \/>1 files changed, 1 insertions(+), 1 deletions(-)<br \/><br \/>Don\u2019t forget to bump the version number after branching off!<br \/><br \/>Then, fix the bug and commit the fix in one or more separate commits.<br \/><br \/>$ git commit -m &quot;Fixed severe production problem&quot;<br \/>[hotfix-1.2.1 abbe5d6] Fixed severe production problem<br \/>5 files changed, 32 insertions(+), 17 deletions(-)<br \/><br \/>Finishing a hotfix branch<br \/><br \/>When finished, the bugfix needs to be merged back into master, but also needs to be merged back into develop, in order to safeguard that the bugfix is included in the next release as well. This is completely similar to how release branches are finished.<br \/><br \/>First, update master and tag the release.<br \/><br \/>$ git checkout master<br \/>Switched to branch &#39;master&#39;<br \/>$ git merge --no-ff hotfix-1.2.1<br \/>Merge made by recursive.<br \/>(Summary of changes)<br \/>$ git tag -a 1.2.1<br \/><br \/>Edit: You might as well want to use the -s or -u &lt;key&gt; flags to sign your tag cryptographically.<br \/><br \/>Next, include the bugfix in develop, too:<br \/><br \/>$ git checkout develop<br \/>Switched to branch &#39;develop&#39;<br \/>$ git merge --no-ff hotfix-1.2.1<br \/>Merge made by recursive.<br \/>(Summary of changes)<br \/><br \/>The one exception to the rule here is that, when a release branch currently exists, the hotfix changes need to be merged into that release branch, instead of develop. Back-merging the bugfix into the release branch will eventually result in the bugfix being merged into develop too, when the release branch is finished. (If work in develop immediately requires this bugfix and cannot wait for the release branch to be finished, you may safely merge the bugfix into develop now already as well.)<br \/><br \/>Finally, remove the temporary branch:<br \/><br \/>$ git branch -d hotfix-1.2.1<br \/>Deleted branch hotfix-1.2.1 (was abbe5d6).<br \/><br \/>Summary<br \/><br \/>While there is nothing really shocking new to this branching model, the \u201cbig picture\u201d figure that this post began with has turned out to be tremendously useful in our projects. It forms an elegant mental model that is easy to comprehend and allows team members to develop a shared understanding of the branching and releasing processes.<br \/><br \/>A high-quality PDF version of the figure is provided here. Go ahead and hang it on the wall for quick reference at any time.<br \/><br \/>Update: And for anyone who requested it: here\u2019s the gitflow-model.src.key of the main diagram image (Apple Keynote).\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13yd5bhivv1hx5mi223idg4vsz5ijsj404\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13yd5bhivv1hx5mi223idg4vsz5ijsj404\/comments","totalItems":0},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13yd5bhivv1hx5mi223idg4vsz5ijsj404\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/103252362788868123968\/posts\/E5RRWEwvD8o"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2012-09-12T15:12:35.264Z","radius":null,"title":"A successful Git branching model\nhttp:\/\/nvie.com\/posts\/a-successful-git-branching-model\/\n\nIn this post...","updated":"2012-09-12T15:12:35.264Z","url":"https:\/\/plus.google.com\/103252362788868123968\/posts\/E5RRWEwvD8o","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"River Williamson","id":"106886356574651474875","image":{"url":"https:\/\/lh4.googleusercontent.com\/-bjrzE56We1o\/AAAAAAAAAAI\/AAAAAAAAAWo\/NSw4BIrKyOI\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/106886356574651474875"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/iE190jA2BODKWV4J-NCLcg3sIjE\"","geocode":null,"id":"z13ph5iihpuvihuwo04cfdrwnrrnv3qhdkc0k","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"The distributed version control system gets native, built-in support.","displayName":"Microsoft embraces git with new TFS support, Visual Studio integration","embed":null,"fullImage":{"height":null,"type":"image\/jpeg","url":"http:\/\/cdn.arstechnica.net\/wp-content\/uploads\/2013\/01\/Commit-Changes-to-Git-in-Visual-Studio.png","width":null},"id":null,"image":{"height":120,"type":"image\/jpeg","url":"https:\/\/lh6.googleusercontent.com\/proxy\/YNpDI9ia_tU8BOa3BcDaGUGUxDwbB37TYKKjUYkiglRVyRVLjyvKLdIexHDZdbnQ9Hac-IwVGvG9J-NhMUEK63f-arhpYgAlwpt-Th9tAvUOqxzpqFEgJ2-9XuKa1T9vq-6XKcuB-27cDHomUkjoPw=w120-h120","width":120},"objectType":"article","thumbnails":null,"url":"http:\/\/arstechnica.com\/information-technology\/2013\/01\/microsoft-embraces-git-with-new-tfs-support-visual-studio-integration\/"}],"content":"Never thought I&#39;d see the day when Visual Studio would embrace Linus Torvalds&#39; version control system.\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13ph5iihpuvihuwo04cfdrwnrrnv3qhdkc0k\/people\/plusoners","totalItems":2},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13ph5iihpuvihuwo04cfdrwnrrnv3qhdkc0k\/comments","totalItems":1},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13ph5iihpuvihuwo04cfdrwnrrnv3qhdkc0k\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/106886356574651474875\/posts\/RtxRumfXjE1"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2013-01-31T21:08:31.653Z","radius":null,"title":"Never thought I'd see the day when Visual Studio would embrace Linus Torvalds' version control system...","updated":"2013-01-31T21:08:31.653Z","url":"https:\/\/plus.google.com\/106886356574651474875\/posts\/RtxRumfXjE1","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Paul Dinham","id":"109143414209587461721","image":{"url":"https:\/\/lh3.googleusercontent.com\/-BOvXicr-TaM\/AAAAAAAAAAI\/AAAAAAAAAA8\/6WXtoJsmEqY\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/109143414209587461721"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/e3FGvDaUJgTXMY-FkaRdwomMFwM\"","geocode":null,"id":"z122czyw0lbeydvdo22ich34rkqlezrwd04","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":null,"displayName":"Paul Dinham: Why Git is Better than SVN","embed":null,"fullImage":{"height":null,"type":"image\/jpeg","url":"http:\/\/goo.gl\/cNttBx","width":null},"id":null,"image":{"height":120,"type":"image\/jpeg","url":"https:\/\/lh6.googleusercontent.com\/proxy\/zpn5j1uXS3W2eEVFqrvLVrlj8zOOQuJU-HQfanDymwbd0uo-=w120-h120","width":120},"objectType":"article","thumbnails":null,"url":"http:\/\/site.pauldinham.me\/2013\/11\/why-git-is-better-than-svn.html"}],"content":"<b>Why Git is Better than SVN<\/b><br \/>The trend of versioning management system is heading Git. Our old friend SVN is losing in the enduser market. The reasons are can be seen in the points below: SVN repository data is centralised and for only 1 project , in pratice. Each copy of project store...\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z122czyw0lbeydvdo22ich34rkqlezrwd04\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z122czyw0lbeydvdo22ich34rkqlezrwd04\/comments","totalItems":0},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z122czyw0lbeydvdo22ich34rkqlezrwd04\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/109143414209587461721\/posts\/9qnazR2r8mR"},"placeId":null,"placeName":null,"provider":{"title":"Blogger"},"published":"2013-11-12T07:11:33.291Z","radius":null,"title":"Why Git is Better than SVN\nThe trend of versioning management system is heading Git. Our old friend ...","updated":"2013-11-12T07:11:33.291Z","url":"https:\/\/plus.google.com\/109143414209587461721\/posts\/9qnazR2r8mR","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Kevin Kroese","id":"100301095114818846146","image":{"url":"https:\/\/lh4.googleusercontent.com\/-yni4-jZA-vs\/AAAAAAAAAAI\/AAAAAAAAD2M\/lJLBXBy3oC0\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/100301095114818846146"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/GiNliyByZ3HMaSrWwhBxeqIctB8\"","geocode":null,"id":"z12khrzghozaf3toy04cdfujbqf0d3eqjvc0k","kind":"plus#activity","object":{"actor":null,"attachments":null,"content":"Web Application Developer - Cape Town, South Africa<br \/><br \/>If you are interested to work on scalable Web Applications, then this position may be for you.<br \/><br \/>We are looking for Self-driven individuals who can show initiative and also work well in a team.<br \/><br \/>Requirements<br \/>- 2-3 Years Object Oriented Programming experience<br \/>- Working knowledge of MVC architecture<br \/>- SQL<br \/>- HTML, CSS, JavaScript<br \/>- Knowledge and understanding of versioning systems (preferably Git)<br \/>- Test Driven Development<br \/>- Comfortable in Linux Development environment<br \/>- Experienced in at least one of PHP\/Java<br \/><br \/>Nice to have<br \/>- GWT<br \/>\u00a0- NoSQL (preferably MongoDB)<br \/>- Comfortable in Agile Development environment<br \/>- Service-oriented architecture<br \/>- Interest in open-source application development<br \/>- Strong team player<br \/>- Interested and up to speed on latest Web Technologies<br \/><br \/><br \/>CV must be submitted to kevin.kroese@a24group.com in PDF format. \u00a0Consider also including your Twitter, Google Plus, Github handles.\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12khrzghozaf3toy04cdfujbqf0d3eqjvc0k\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12khrzghozaf3toy04cdfujbqf0d3eqjvc0k\/comments","totalItems":5},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12khrzghozaf3toy04cdfujbqf0d3eqjvc0k\/people\/resharers","totalItems":1},"url":"https:\/\/plus.google.com\/100301095114818846146\/posts\/TZZN1tqXfFD"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2013-02-04T09:20:04.812Z","radius":null,"title":"Web Application Developer - Cape Town, South Africa\n\nIf you are interested to work on scalable Web A...","updated":"2013-02-04T09:20:04.812Z","url":"https:\/\/plus.google.com\/100301095114818846146\/posts\/TZZN1tqXfFD","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"jonathan munn","id":"110643348540885353576","image":{"url":"https:\/\/lh4.googleusercontent.com\/-5FqC57m9QVo\/AAAAAAAAAAI\/AAAAAAAAAHE\/VSnqeIi0fr4\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/110643348540885353576"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/tjeX2nW8AoDUp8iVajwtyUwz94U\"","geocode":null,"id":"z12ysfdrhljac3gsd22ef3ch5mzuuzxia04","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"Fitts's law. From Wikipedia, the free encyclopedia. (Redirected from Fitt's law). Jump to: navigation, search. \"fitt\" redirects here. For the word used in Old English poetry, see Beo...","displayName":"Fitts's law - Wikipedia, the free encyclopedia","embed":null,"fullImage":{"height":null,"type":"image\/jpeg","url":"http:\/\/upload.wikimedia.org\/math\/1\/d\/0\/1d0c6777254f50f906d6f523ac035a0e.png","width":null},"id":null,"image":{"height":120,"type":"image\/jpeg","url":"https:\/\/lh6.googleusercontent.com\/proxy\/NME_VbN8pjxM35g4ot8gdBInYzd-aiGGMvNm-ZAh0t7C66vYgDEAo3acTBaiQdw0h3XvKAO2ig=w120-h120","width":120},"objectType":"article","thumbnails":null,"url":"http:\/\/en.wikipedia.org\/wiki\/Fitt's_law"}],"content":"<b>Thoughts about Mac OS X Lion<\/b><br \/><br \/>Yesterday in a chat with an old friend \u2014 old in both senses of the word: we have known each other for years, and we\u2019re both no spring chickens \u2014 he mentioned that he didn\u2019t plan on moving on to Lion, that he didn\u2019t see what it would bring him. Although I haven\u2019t moved on yet either, I disagreed.<br \/><br \/>I see Lion as offering a few compelling options that can help me in my workflow, and one possible blockage.<br \/><br \/>Let\u2019s start with the blockage. Unlike some [lucky] people I don\u2019t have 15 different 27&quot; screens to work on. I prefer small and compact set-ups. But I have been using Spaces for years now to increase my screen space. I have rigged up the top right-hand corner to trigger Spaces, so when I need to switch workspaces, I flip the mouse\/cursor up there \u2014 one of the applications of Fitt\u2019s law says that it\u2019s a lot easier to hit a spot at the edge of a screen that an arbitrary point anywhere else on the screen \u2014 see my Spaces spread out, click anywhere in the large target of the screen where I need to go, and I\u2019m off. Minimal interruption, and a decent workflow situation. What Spaces doesn\u2019t provide however is automatic pinning of a software set-up to a specific workspace, so that at the beginning of a session I do have to organise things. In this way the reflex of hitting a specific Space for, for example, Coda or Pixelmator or the Finder is not memory muscle \u2014 it needs a conscious choice. [It should also be noted that Adobe\u2019s CS suite plays badly with Spaces \u2014 and people ask me why I don\u2019t like Adobe products much...]<br \/><br \/>In Lion, Spaces has gone, having been replaced by Mission Control, a tool that integrates Spaces, Expos\u00e9 [and possibly Dashboard, but as I never used that, I\u2019ll just need a way to shut it down]. <i>Michael Lopp<\/i>, on his blog <i>Rands In Repose<\/i>, has noted that, in his opinion, Mission Control is an improvement on Spaces and less of an interruption when you\u2019re <i>in the zone<\/i>, so let\u2019s say that I\u2019m feeling optimistic on this point.<br \/><br \/>But for me there are two killer features in Lion. Full-screen apps, and Versions.<br \/><br \/>Full-screen is interesting as I rarely want to work in a multi-windowed environment. When I\u2019m coding or writing I don\u2019t want distractions, and already tend to open windows as wide as possible, trying to reclaim all the pixels I can. As far as I can see, Coda has already implemented this possibility. For basic text writing I use Byword. It has a fullscreen, no-distractions mode. For more evolved writing, I use Bean, a free RTF-aware, writing app that also has a fullscreen mode. So it looks like I could be getting there. [It should be noted that Pixelmator also has a fullscreen mode, but I find the undockable floating palettes distracting...]<br \/><br \/>What I find most interesting is Versions, Lion\u2019s integrated version-control system. Currently I have my own LowFi system: I zip up a work in progress \u2014 generally daily \u2014, date it, and file it in a backup folder inside my work folder. This means that I have \u2018n\u2019 previous versions to go back to in the event of major mistakes or unfortunate changes. For text files I can use Apple\u2019s FileMerge utility to do diffs [although as it doesn\u2019t work on zipped files, I have to unzip first] TextWrangler, or its commercial big brother, BBEdit, also have some neat diff capabilities... For RTF files I have to manually go back and check and cut-and-paste. I have toyed with installing <i>Subversion<\/i> or <i>git<\/i> to act as a versioning system for my writing needs, but it has always struck me as a cumbersome replacement for a system that \u2014 essentially \u2014 already functions without too much hassle.<br \/><br \/>This then, combined with Dropbox, covers my versioning needs.<br \/><br \/>So I figure that once my main apps \u2014 Coda, Bean or Byword, TextWrangler \u2014 integrate Versions, I shall make the shift to Lion.<br \/><br \/>And what about you?<br \/><br \/><br \/><b>Links<\/b><br \/><br \/>Fitt\u2019s Law: <a href=\"http:\/\/en.wikipedia.org\/wiki\/Fitt%27s_law\">http:\/\/en.wikipedia.org\/wiki\/Fitt&#39;s_law<\/a><br \/>Coda: <a href=\"http:\/\/panic.com\/coda\/\">http:\/\/panic.com\/coda\/<\/a> [*]<br \/>Pixelmator: <a href=\"http:\/\/pixelator.com\/\">http:\/\/pixelator.com\/<\/a> [*]<br \/>Rands In Repose: <a href=\"http:\/\/randsinrepose.com\/\">http:\/\/randsinrepose.com\/<\/a><br \/>Byword: <a href=\"http:\/\/bywordapp.com\/\">http:\/\/bywordapp.com\/<\/a> [*]<br \/>Bean: <a href=\"http:\/\/bean-osx.com\/\">http:\/\/bean-osx.com\/<\/a><br \/>TextWrangler: <a href=\"http:\/\/barebones.com\/products\/textwrangler\/\">http:\/\/barebones.com\/products\/textwrangler\/<\/a> [*]<br \/>BBEdit: <a href=\"http:\/\/barebones.com\/products\/bbedit\/\">http:\/\/barebones.com\/products\/bbedit\/<\/a> [*]<br \/>Subversion: <a href=\"http:\/\/subversion.apache.org\/\">http:\/\/subversion.apache.org\/<\/a><br \/>Git: <a href=\"http:\/\/git-scm.com\/\">http:\/\/git-scm.com\/<\/a><br \/>Dropbox: <a href=\"http:\/\/dropbox.com\/\">http:\/\/dropbox.com\/<\/a><br \/><br \/>[*] available in the Mac App Store.<br \/><br \/>FileMerge - available in Apple\u2019s dev tools, in XCode.\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12ysfdrhljac3gsd22ef3ch5mzuuzxia04\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12ysfdrhljac3gsd22ef3ch5mzuuzxia04\/comments","totalItems":2},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12ysfdrhljac3gsd22ef3ch5mzuuzxia04\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/110643348540885353576\/posts\/2aBJKFPPBWt"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2011-08-09T10:16:36.957Z","radius":null,"title":"Thoughts about Mac OS X Lion\n\nYesterday in a chat with an old friend \u2014 old in both senses of the word...","updated":"2011-08-09T18:33:29.000Z","url":"https:\/\/plus.google.com\/110643348540885353576\/posts\/2aBJKFPPBWt","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"Dan Becker","id":"108777965999399901004","image":{"url":"https:\/\/lh6.googleusercontent.com\/-wVlTjCMmlQc\/AAAAAAAAAAI\/AAAAAAAAC-w\/Hvmx4vztoQY\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/108777965999399901004"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/PPMYCcBtfngokFvlDMvbo7sfbHQ\"","geocode":null,"id":"z12bzn0w4xz5ufwoj04cgzeojprjfriiano0k","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"","displayName":"ComponentSoftware RCS - Version Control System for Windows","embed":null,"fullImage":null,"id":null,"image":null,"objectType":"article","thumbnails":null,"url":"http:\/\/www.componentsoftware.com\/products\/RCS\/index.htm"}],"content":"Greenfield version control system implementation is about to select...RCS?! Why not svn, git, hg, even cvs?? Why???<br \/><br \/>No, seriously - why on earth would someone do this today? Is there a plausible argument to be made for selecting RCS here?\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12bzn0w4xz5ufwoj04cgzeojprjfriiano0k\/people\/plusoners","totalItems":0},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12bzn0w4xz5ufwoj04cgzeojprjfriiano0k\/comments","totalItems":7},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z12bzn0w4xz5ufwoj04cgzeojprjfriiano0k\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/108777965999399901004\/posts\/R4wcRvo34L6"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2011-08-11T01:22:11.350Z","radius":null,"title":"Greenfield version control system implementation is about to select...RCS?! Why not svn, git, hg, even...","updated":"2011-08-11T01:22:11.350Z","url":"https:\/\/plus.google.com\/108777965999399901004\/posts\/R4wcRvo34L6","verb":"post"},{"access":{"description":"Public","items":[{"displayName":null,"id":null,"type":"public"}],"kind":"plus#acl"},"actor":{"displayName":"I Programmer","id":"109209064991427323662","image":{"url":"https:\/\/lh5.googleusercontent.com\/-inYqNQ_1S4g\/AAAAAAAAAAI\/AAAAAAAAACM\/bJyXXIAuCxI\/photo.jpg?sz=50"},"name":null,"url":"https:\/\/plus.google.com\/109209064991427323662"},"address":null,"annotation":null,"crosspostSource":null,"etag":"\"TTbz3xy1I5OVJNV4ylIvI-QbXF4\/L257W6LN9GBf6bfjvvmQC5OUomw\"","geocode":null,"id":"z13uytbqgya3sjclh22rsf05kuelvhp5c04","kind":"plus#activity","object":{"actor":null,"attachments":[{"content":"","displayName":"I Programmer - programming, reviews and projects","embed":null,"fullImage":null,"id":null,"image":null,"objectType":"article","thumbnails":null,"url":"http:\/\/www.i-programmer.info\/"}],"content":"BOOK WATCH<br \/>Automating ActionScript Projects with Eclipse and Ant<br \/>Automating repetitive programming tasks is easier than many Flash\/AS3 developers think. With the Ant build tool, the Eclipse IDE, and this concise (96-page) guide, you can set up your own &quot;ultimate development machine&quot; to code, compile, debug, and deploy projects faster. You\u2019ll also get started with versioning systems, such as Subversion and Git.\ufeff","id":null,"objectType":"note","originalContent":null,"plusoners":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13uytbqgya3sjclh22rsf05kuelvhp5c04\/people\/plusoners","totalItems":2},"replies":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13uytbqgya3sjclh22rsf05kuelvhp5c04\/comments","totalItems":0},"resharers":{"selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities\/z13uytbqgya3sjclh22rsf05kuelvhp5c04\/people\/resharers","totalItems":0},"url":"https:\/\/plus.google.com\/109209064991427323662\/posts\/8a8yNLEt2Be"},"placeId":null,"placeName":null,"provider":{"title":"Google+"},"published":"2011-11-11T17:29:35.728Z","radius":null,"title":"BOOK WATCH\nAutomating ActionScript Projects with Eclipse and Ant\nAutomating repetitive programming tasks...","updated":"2011-11-11T17:29:35.728Z","url":"https:\/\/plus.google.com\/109209064991427323662\/posts\/8a8yNLEt2Be","verb":"post"}],"kind":"plus#activityFeed","nextLink":null,"nextPageToken":"Ci4I58BuEiiG1qoB0cyPA9uFwwOByO0ExsuqBcbLqgXgiZkG4ImZBvv__gj7__4ICicI0fBrEiHj50Xj50WZlWGs_GGs_GHfznaE7HyI4tEB6IeKAv-zyAIKKwiCzxYSJfL0C7utN8z3YtmbhwHYwJQBgJTJAeSNzgLPzdkC9qXoAszKqQMKLQi0uA0SJ-3HBvzB9gHOzZkCnNrDAur3jgP60rsD6LLNA-mXhgSu-7QEwtraBAosCIDlUxImk7Rpk7Rp2fuuAovb5QLO5vUCqLC5A4TfvwO5v6sE7KfJBOLZ_QQKLAjUgwoSJuGVOcGbWaC7jwGAvJIB3pKlAeL3twHtgrgCy6TcAvGHmwOO_ZsDCioIydsdEiSexRyLniqLniqRxET-oZ8B_qGfAfaHrgHmpNAB5qTQAeGLwgIKKAiepCkSItvDP9vDP7rsUrrsUv3vav3vasKkzAHCpMwBkfO-A9aFlwQKKQidiQwSI967B-CsIb7bO-38QuKPX6-8hQGZ3KgByau2AfrbnQKgxLYCCisI2NJUEiXK3TbRqWCTvX_shIwBhd-_AcGT3gGf2OEBnLqRAr2U5ALy0I4DCisIq9c1EiWj93GkgXqkgXq4-YcCjOaIAvv7vQKM_8wDzNzwA4PykQSD8pEECioInp9cEiTUnk269GC_n3L9inShvMIB9-bRAY-FyAKl_e4C7vP6Ava3_AIKLQjaznESJ-riLPj4kgKUwZkCzuuhAtO6gQTxv5IElYTTBJWE0wSVhNMEndKGBQosCK-LJxImgOYE7bsm56XJAavX-wGI1oUCotKRAr6QmwKvstMCq82XA_rtowMKLQjztUoSJ_WfStuIwAGzpu4BxvucAu6MpwLOpa0CjYqEA4SJjgPB-bcE5YbDBAorCPK2GhIl2v4BzI5M4MZalrTMAe7i0AHE3-EBm_rtAc-YggLO0rIDobPEAwosCJizTxImwNoRy9hh-aqoAbHqqgHm-4QDqt-7A8yxzAPEgPwDxPPGBPjWvQUKKwjA2QQSJfX0NI3wQOWxasiPgAGy2YIBk6TJAcvlzAGWiKkC1ZDQAojVkQMKLAiS-UcSJoSDCdSuVPmXkgHSzeIB0s3iAcO__AGrtoYC5Ia9A5KYuASVorkECiwIg9EWEibB8BLnhSL5lYYB8s-TAenfmwGRvc0BzoD1AcuGugLd1LsCl76NAxC37_GWBRi37_GWBSIAKM6ypZoF","selfLink":"https:\/\/www.googleapis.com\/plus\/v1\/activities?query=Git%2BVersioning%20Systems&language=en&orderBy=best&language=en&maxResults=20&language=en&language=en&language=en&key=AIzaSyCa58KRY6XmjxmMsiSBMXLKxsSBC3_Yf40","title":"Google+ Activities Search Results","updated":"2014-01-20T01:11:18.628Z"}